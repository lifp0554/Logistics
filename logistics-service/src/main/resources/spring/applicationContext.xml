<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
	<!-- 设置使用注解的类所在的包 -->
	<context:component-scan base-package="com.ideacome">
	</context:component-scan>
	<!-- enable autowire -->
	<context:annotation-config />
	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven />
	<task:annotation-driven />

	<bean id="configProfile"
		class="com.dangdang.config.service.zookeeper.ZookeeperConfigProfile">
		<constructor-arg name="connectStr" value="${config.server.zk}" />
		<constructor-arg name="rootNode" value="${config.server.project}" />
		<constructor-arg name="version" value="${config.server.version}" />
	</bean>

	<bean id="propertyGroup3rdParty"
		class="com.dangdang.config.service.zookeeper.ZookeeperConfigGroup">
		<constructor-arg ref="configProfile" />
		<constructor-arg value="${config.server.group}" />
	</bean>
	<bean id="configGroupSources"
		class="com.dangdang.config.service.support.spring.ConfigGroupSourceFactory"
		factory-method="create">
		<constructor-arg name="configGroups">
			<list>
				<ref bean="propertyGroup3rdParty" />
			</list>
		</constructor-arg>
	</bean>

	<bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="order" value="1" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="propertySources" ref="configGroupSources" />
	</bean>

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<bean id="parentDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
	</bean>
	<!-- 主数据源 -->
	<!-- 连接池信息 -->
	<bean id="masterDataSource" parent="parentDataSource">
		<property name="driverClassName" value="${master.jdbc.driverClassName}" />
		<property name="url" value="${master.jdbc.url}" />
		<property name="username" value="${master.jdbc.username}" />
		<property name="password" value="${master.jdbc.password}" />
		<property name="maxActive" value="${pool.maxActive}" />
		<property name="initialSize" value="${pool.initialSize}" />
		<property name="maxWait" value="${pool.maxWait}" />
		<property name="minIdle" value="${pool.minIdle}" />

		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
	</bean>
	<!-- 从数据源 -->
	<!-- 连接池信息 -->
	<bean id="slaveDataSource" parent="parentDataSource">
		<property name="driverClassName" value="${slave.jdbc.driverClassName}" />
		<property name="url" value="${slave.jdbc.url}" />
		<property name="username" value="${slave.jdbc.username}" />
		<property name="password" value="${slave.jdbc.password}" />
		<property name="maxActive" value="${pool.maxActive}" />
		<property name="initialSize" value="${pool.initialSize}" />
		<property name="maxWait" value="${pool.maxWait}" />
		<property name="minIdle" value="${pool.minIdle}" />

		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
	</bean>
	<bean id="dataSource" class="com.ideacome.db.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="slave" value-ref="slaveDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>
	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.ideacome.logistics.entity" />
		<property name="configLocation" value="classpath:mybatis/myBatisContext.xml" />
	</bean>

	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ideacome.logistics.mapper" />
	</bean>

</beans>
